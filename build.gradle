import java.text.SimpleDateFormat
import quickcarpet.build.*

plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
}

loom {
	accessWidenerPath = file("src/main/resources/quickcarpet.accesswidener")
	runs {
		testServer {
			server()
			source "test"
			name "Minecraft Test Server"
			vmArgs "-Dquickcarpet.test=true"
			programArgs "${rootDir}/src/test/resources/structures"
		}
	}
}

check.dependsOn(runTestServer)

def buildDate = new Date()
def branch = GitHelper.getBranch(rootDir)
def ver = GitHelper.getVersion(rootDir, project.mod_version)

if (branch != "master" && branch != "main" && branch != "HEAD" && !ver.pre.isEmpty()) {
	ver.pre.add(0, branch.replaceAll("[+-]", '_'))
}

println ver

version = ver.toString()

allprojects {
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16

	archivesBaseName = project.name
	group = project.maven_group

	dependencies {
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// javax.annotation.Nullable/Nonnull
		compileOnly "com.google.code.findbugs:jsr305:3.0.1"

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	}

	test {
		useJUnitPlatform()
	}

	jar {
		from "${rootDir}/LICENSE.md"
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		it.options.release = 16
	}

	processResources {
		def properties = [
			version: rootProject.version,
			api_version: project.api_version,
			malilib_version: project.malilib_version
		]
		inputs.properties properties

		filesMatching("fabric.mod.json") {
			expand properties
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = "sources"
		from sourceSets.main.allSource
	}
}

def malilib_mc_version = project.hasProperty('malilib_mc_version') ? project.malilib_mc_version : project.minecraft_version

repositories {
	maven {
		name 'Masa'
		url 'https://masa.dy.fi/maven/'
	}
	maven {
		name 'QuiltMC'
		url 'https://maven.quiltmc.org/repository/release/'
	}
	mavenLocal()
}

dependencies {
	modImplementation project(":quickcarpet-api")

	modImplementation "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	//modImplementation "net.fabricmc.fabric-api:fabric-networking-api-v1:${project.fabric_networking_api_v1_version}"
	//modImplementation "net.fabricmc.fabric-api:fabric-registry-sync-v0:${project.fabric_registry_sync_v0_version}"
	modCompileOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

	// JiJ fabric-resource-loader and quickcarpet-api

	include "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	afterEvaluate {
		include project(":quickcarpet-api")
	}

	modCompileOnly("fi.dy.masa.malilib:malilib-fabric-${malilib_mc_version}:${project.malilib_version}") {
		exclude module: "modmenu"
	}
}

remapJar.dependsOn(project(":quickcarpet-api").tasks.remapJar)

task generateJava(type: Copy) {
	group = 'build'
	description 'Generates Build.java'

	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	def templateContext = [
			version: project.version,
			timestamp: df.format(buildDate),
			branch: GitHelper.getBranch(rootDir),
			commit: GitHelper.getCommit(rootDir),
			working_dir_clean: GitHelper.getStatus(rootDir),
			minecraft_version: project.minecraft_version,
			yarn_mappings: project.yarn_mappings
	]
	inputs.properties templateContext // for gradle up-to-date check
	from 'src/template/java'
	into "$buildDir/generated/java"
	expand templateContext
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateJava

task dumpRules(type: JavaExec, dependsOn: classes) {
	group = JavaBasePlugin.DOCUMENTATION_GROUP
	description = 'Writes all rules to rules.md'

	inputs.file('src/main/java/quickcarpet/settings/Settings.java')
	inputs.file('src/main/resources/assets/quickcarpet/lang/en_us.json')
	outputs.file('rules.md')
	outputs.file('run/rules.md')

	workingDir = "run"
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "quickcarpet.settings.Settings"
	doLast {
		copy {
			from "run/rules.md"
			into "."
		}
	}
}

gradle.taskGraph.whenReady {
	generateJava.enabled = !gradle.taskGraph.hasTask(dumpRules)
}


apply from: 'setupAuth.gradle'